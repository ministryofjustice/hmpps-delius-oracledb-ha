
- name: (main/restore-primary-to-standby) Primary tasks
  block:

      - name: (main/restore-primary-to-standby) Detect dataguard config on primary
        script: get_dataguard_configuration.sh
        changed_when: false
        become: true
        become_user: "{{ rdbms_service_user.name }}"
        register: get_dataguard_configuration

      - name: (main/restore-primary-to-standby) Check standby database is in sync
        script: standby_database_insync.sh
        changed_when: false
        delegate_to: "{{ standby_host }}"
        become: true
        become_user: "{{ rdbms_service_user.name }}"
        register: standby_database_insync

      # If there is no dataguard configuration on the primary we want to force a duplicate to standby regardless
      # of the dataguard status on the standby.  This typically occurs if the primary has been refreshed or restored
      # and we need to force the standby databases (which may still be running from before the restore) to be refreshed as well.
      - name: (main/restore-primary-to-standby) Set Force Restore Flag if no Dataguard Configuration on Primary
        set_fact:
            primary_data_guard_unconfigured: true
        when: get_dataguard_configuration.stdout is search('ORA-16532') or (not standby_database_insync.stdout_lines[0] | bool)

  when: inventory_hostname in groups[primary]  

- name: (main/restore-primary-to_standby) 
  block:

    # Force Restore Flag is Set if Forced (e.g. After Duplicate) or if a Data Guard Config issue has been found on the Primary
    - name: (main/restore-primary-to-standby) Set Force Restore Flag
      set_fact:
          force_restore_flag: "-f"
      when: ( force_restore | default(false) | bool ) or ( hostvars[groups[primary][0]].primary_data_guard_unconfigured | default(false) | bool )

    - name: (main/restore-primary-to-standby) Configure database to use ASM password file
      shell: |
             . ~/.bash_profile
             srvctl modify database -d {{ database_standby_sid }} -pwfile +DATA/{{ database_standby_sid }}/orapw{{ database_standby_sid }}
      become: true
      become_user: "{{ rdbms_service_user.name }}"

    - name: (main/restore-primary-to-standby) Copy rman restore bash script to standby
      copy:
        src: "{{ role_path}}/files/rman_duplicate_to_standby.sh"
        dest: "/tmp/rman_duplicate_to_standby.sh"
        mode: 0744
      become: true
      become_user: "{{ rdbms_service_user.name }}"

    - name: (main/restore-primary-to-standby) Set ssm parameter option if required
      set_fact:
        ssm_parameter_option: "-p {{ ssm_option }}"
        poll_value: 0 
      when: update_ssm_parameter_restore

    - name: (main/restore-primary-to-standby) Run rman restore bash script
      shell: ". ~/.bash_profile; /tmp/rman_duplicate_to_standby.sh {{ force_restore_flag | default('') }} -t {{ database_primary_unique_name }} -s {{ database_standby_unique_name }} -i {{ oracle_database_oracle_home }}/dbs/init{{ database_standby_sid}}.ora_predg {{ ssm_parameter_option|default() }}" 
      async: 28800
      poll: "{{ poll_value | default(20) }}"
      become: true
      become_user: "{{ rdbms_service_user.name }}"
      register: restore_result

    - name: (main/restore-primary-to-standby) Print rman restore output
      debug:
        var: restore_result.stdout_lines
        verbosity: 0

  when: inventory_hostname in groups[standby]