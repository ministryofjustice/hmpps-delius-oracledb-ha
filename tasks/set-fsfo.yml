
- name: Get Fast-Start Failover Status
  shell: |
        . ~/.bash_profile
        dgmgrl -silent / "show configuration;" | awk -F: '/Fast-Start Failover/{print $2}'
  register: get_fast_start_failover
  changed_when: false

# Disable Fast Start Failover before stopping Observers to prevent a failover attempt (Run from Primary)
- name: Disable Fast Start Failover
  shell: |
      . ~/.bash_profile
      dgmgrl / "disable fast_start failover;"
  when:
    - inventory_hostname == groups[ primary ][0]
    -  ( get_fast_start_failover.stdout | trim ) != 'Disabled'
  vars:
          ansible_aws_ssm_timeout: 60

# Setup steps only - do not change FSFO configuration during password rotation
- name: Run Setup Steps on Primary Only
  when: 
     - inventory_hostname == groups[ primary ][0]
     - not password_rotation
  block:

      - name: Get Existing FSFO Health Conditions
        shell: |
                . ~/.bash_profile
                dgmgrl  / "show fast_start failover;" | awk '{if(flag==1){print $0}}/Health Conditions:/{flag=1}/^$/{flag=0}'
        register: get_fsfo_health_conditions
        changed_when: false

      - name: Generate Dictionary of FSFO Health Conditions
        set_fact:
            current_fsfo_health_conditions: "{{ current_fsfo_health_conditions | default({}) | combine({ ( item | regex_replace('(YES|NO)$','') | trim ) : ( item | regex_replace('^.*(YES|NO)$','\\1') ) }) }}"
        loop: "{{ get_fsfo_health_conditions.stdout_lines }}"

      - name: Enable Target FSFO Health Conditions
        shell: |
              . ~/.bash_profile
              dgmgrl  / 'enable fast_start failover condition "{{ item }}";'
        loop:  "{{ target_fsfo_health_conditions | default([]) }}"
        when: 
          - (current_fsfo_health_conditions[item] | default('NO')) != 'YES'

      - name: Disable Unwanted Target FSFO Health Conditions
        shell: |
              . ~/.bash_profile
              dgmgrl  / 'disable fast_start failover condition "{{ item }}";'
        loop:  "{{ current_fsfo_health_conditions.keys() }}"
        when:  
          - item not in ( target_fsfo_health_conditions | default([]) )
          - (current_fsfo_health_conditions[item] | default('NO')) == 'YES'

      - name: Get Observer Reconnection Attempt Interval
        shell: |
              . ~/.bash_profile
              dgmgrl -silent  / 'show configuration ObserverReconnect;' | awk -F= '{print $2}'
        register: get_ObserverReconnect
        changed_when: false

      - name: Set Observer Reconnection Attempt Interval
        set_fact:
            current_observer_reconnect: "{{ get_ObserverReconnect.stdout_lines[-1] | replace(\"'\",'') |  trim }}"
        when: get_ObserverReconnect.stdout != ''

      - name: Configure Observer Reconnection Attempt Interval
        shell: |               
              . ~/.bash_profile
              dgmgrl -silent  / 'edit configuration set property ObserverReconnect = {{ target_fsfo_observer_reconnect }};'
        when: ( target_fsfo_observer_reconnect | int ) != ( current_observer_reconnect | default(30) | int )

      - name: Get Fast Start Failover Timeout Threshold
        shell: |
              . ~/.bash_profile
              dgmgrl -silent  / 'show configuration FastStartFailoverThreshold;' | awk -F= '{print $2}'
        register: get_FSFOThreshold
        changed_when: false

      - name: Set Fast Start Failover Timeout Threshold
        set_fact:
            current_fsfo_threshold: "{{ get_FSFOThreshold.stdout_lines[-1] | replace(\"'\",'') |  trim }}"

      - name: Configure Fast Start Failover Timeout Threshold if Different
        shell: |               
              . ~/.bash_profile
              dgmgrl -silent  / 'edit configuration set property FastStartFailoverThreshold = {{ target_fsfo_threshold }};'
        when: ( target_fsfo_threshold | int ) != ( current_fsfo_threshold | int )

      # All databases which have a standby are run in Maximum Availability Mode
      - name: Get Protection Mode
        shell: |
              . ~/.bash_profile
              dgmgrl -silent  / 'show configuration;' | awk -F: '/Protection Mode/{print $2}'
        register: get_ProtectionMode
        changed_when: false      

      - name: Set Protection Mode
        set_fact:
            current_protection_mode: "{{ get_ProtectionMode.stdout_lines[-1] |  trim }}"

      - name: Configure Protection Mode
        shell: |               
              . ~/.bash_profile
              dgmgrl -silent  / 'edit configuration set protection mode as maxavailability;'
        when: current_protection_mode != 'MaxAvailability'

- name: Get FSFO Targets
  shell: |
          . ~/.bash_profile
           dgmgrl -silent / "show database verbose {{ database_primary_sid | default(database_standby_sid) }}" | awk -F= '/FastStartFailoverTarget/{print $2}'
  register: get_FastStartFailoverTarget
  changed_when: false

- name: Set FSFO Targets
  set_fact:
      current_fsfo_targets: "{{ get_FastStartFailoverTarget.stdout_lines[-1] | replace(\"'\",'') |  trim }}"

# Much of the following steps are notionally set-up only; but we run them again during a password rotation to correct any misplacement of
# observers which may have occurred due to password changes causing automated changes in the configuration which we do not want.

- name: Initialize Databases Currently in Configuration
  set_fact:
      databases_in_configuration: []

- name: Initialize FSFO Targets
  set_fact:
      fsfo_targets: ''

- name: Get FSFO Targets
  include_tasks: determine-fsfo-targets.yml  
  vars:
     delegation_host: "{{ inventory_hostname }}"
     primary_hostname: "{{ groups[ primary ][0] }}"
     standby1_hostname:  "{{ groups[ standby1 ][0] }}"
     standby2_hostname:  "{{ groups[ standby2 ][0] | default('') }}"
     
- name: Configure FSFO Targets (New Standby)
  shell: |
         . ~/.bash_profile
         dgmgrl / "edit database {{ database_primary_sid | default(database_standby_sid) }} set property FastStartFailoverTarget='{{ fsfo_targets }}';"
  when: (fsfo_targets | lower ) != ( current_fsfo_targets | lower )

# If we have just added a new 2nd Standby it should be added as a Failover option to an existing 1st Standby
- name: Add New 2nd Standby as Failover Option for Existing 1st Standby
  when: 
     - standby_number | int == 2
     - ( hostvars[groups[ standby1 ][0]]['database_standby_sid'] | lower ) in databases_in_configuration
     - inventory_hostname == groups[ primary ][0]
  block:

      - name: Get FSFO Targets
        shell: |
                . ~/.bash_profile
                dgmgrl -silent / "show database verbose {{ hostvars[groups[ standby1 ][0]]['database_standby_sid'] }};" | awk -F= '/FastStartFailoverTarget/{print $2}'
        register: get_FastStartFailoverTarget
        delegate_to:  "{{ hostvars[groups[ standby1 ][0]]['inventory_hostname'] }}"

      - name: Set FSFO Targets
        set_fact:
            current_fsfo_targets: "{{ get_FastStartFailoverTarget.stdout_lines[-1] | replace(\"'\",'') |  trim }}"
  
      - name: Configure FSFO (Existing 1st Standby)
        shell: |
               . ~/.bash_profile
               dgmgrl / "edit database {{ hostvars[groups[ standby1 ][0]]['database_standby_sid'] }} set property FastStartFailoverTarget='{{ hostvars[groups[ primary ][0]]['database_primary_sid'] | lower }},{{ hostvars[groups[ standby2 ][0]]['database_standby_sid'] | lower }}';"
        when: (fsfo_targets | lower ) != (  hostvars[groups[ primary ][0]]['database_primary_sid'] + "," + hostvars[groups[ standby2 ][0]]['database_standby_sid'] | lower )
        register: configure_fsfo_1st
        delegate_to:  "{{ hostvars[groups[ standby1 ][0]]['inventory_hostname'] }}"
        retries: 3
        delay: 60
        until: configure_fsfo_1st is not failed

# If we have just added a new 1st Standby it should be added as a Failover option to an existing 2nd Standby
# This block is unlikely to be called much.   It will only be called under the scenario that the 1st standby has been lost
# but the 2nd standby is still available, and the 1st standby is now being rebuilt
- name: Add New 1st Standby as Failover Option for Existing 2nd Standby
  when: 
     - standby_number | int == 1
     - high_availability_count | int > 1
     - ( hostvars[groups[ standby2 ][0]]['database_standby_sid'] | lower ) in databases_in_configuration
     - inventory_hostname == groups[ primary ][0]
  block:

      - name: Get FSFO Targets
        shell: |
                . ~/.bash_profile
                dgmgrl -silent / "show database verbose {{ hostvars[groups[ standby2 ][0]]['database_standby_sid'] }}" | awk -F= '/FastStartFailoverTarget/{print $2}'
        register: get_FastStartFailoverTarget
        delegate_to:  "{{ hostvars[groups[ standby2 ][0]]['inventory_hostname'] }}"

      - name: Set FSFO Targets
        set_fact:
            current_fsfo_targets: "{{ get_FastStartFailoverTarget.stdout_lines[-1] | replace(\"'\",'') |  trim }}"
  
      - name: Configure FSFO (Existing 2nd Standby)
        shell: |
               . ~/.bash_profile
               dgmgrl  -silent / "edit database {{ hostvars[groups[ standby2 ][0]]['database_standby_sid'] }} set property FastStartFailoverTarget='{{ hostvars[groups[ primary ][0]]['database_primary_sid'] | lower }},{{ hostvars[groups[ standby1 ][0]]['database_standby_sid'] | lower }}';"
        when: (fsfo_targets | lower ) != ( hostvars[groups[ primary ][0]]['database_primary_sid'] + "," + hostvars[groups[ standby1 ][0]]['database_standby_sid'] | lower )
        delegate_to:  "{{ hostvars[groups[ standby2 ][0]]['inventory_hostname'] }}"
     
- name: Steps on Primary Only
  when: inventory_hostname == groups[ primary ][0]
  block:

      - name: Set FSFO Mode
        include: set-fsfo-mode.yml
        vars:
           delegation_host: "{{ groups[ primary ][0] }}"

      # The currently preferred active target is the first FastStartFailoverTarget on the primary
      - name: Set Active Target 
        include: set-fsfo-active-target.yml
        vars:
           delegation_host: "{{ groups[ primary ][0] }}"
           preferred_active_target: "{{ hostvars[groups[ primary ][0]]['fsfo_targets'].split(',')[0] | lower | trim }}"
