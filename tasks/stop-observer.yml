# Whilst we are working on configuring / resetting the Observers we want to temporarily remove them from the control of CRS
# so that it does not attempt to restart the resources at a time not of our choosing
- name: Check if CRS Resource Already Exists
  shell: |
        . ~/.bash_profile
        export ORACLE_SID=+ASM
        export ORAENV_ASK=NO
        . oraenv
        crsctl status resource {{ observer_resource }} -p
  changed_when: false
  register: get_crs_resource

- name: Disable CRS Resource for Observer
  shell: |
        . ~/.bash_profile
        export ORACLE_SID=+ASM
        export ORAENV_ASK=NO
        . oraenv
        crsctl modify resource {{ observer_resource }} -attr "ENABLED=0"
  when: get_crs_resource.stdout is search('.*CRS-2613.*') or not "ENABLED=0" in get_crs_resource.stdout_lines

- name: Get Fast-Start Failover Status
  shell: |
        . ~/.bash_profile
        dgmgrl -silent / "show configuration;" | awk -F: '/Fast-Start Failover/{print $2}'
  register: get_fast_start_failover
  changed_when: false

# Disable Fast Start Failover before stopping Observers to prevent a failover attempt (Run from Primary)
- name: Disable Fast Start Failover
  shell: |
      . ~/.bash_profile
      dgmgrl / "disable fast_start failover;"
  when:
     - inventory_hostname == groups[ primary ][0]
     -  ( get_fast_start_failover.stdout | trim ) != 'Disabled'
  vars:
          ansible_aws_ssm_timeout: 60

# Stop all the Observers on this host to allow it to restart with the new password
# Note that the stopping of Observers can take a long time to complete
- name: Stop Observers to Allow Restart
  shell: |
         . ~/.bash_profile
         {{ observer_config_dir }}/observer.sh stop
  vars:
    ansible_aws_ssm_timeout: 600  